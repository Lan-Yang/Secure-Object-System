1. Test cases for my approach (setuid)
a) The attacker can pretend to be someone else and get privileges to do what he
wants to do.
In my program, it was controlled by acl and userfile.
Users not in the userfile list cannot exec the six excutables.
And one user cannot create an object using another user's identity.
$ su u1 objput u2+doc
No permission to create doc belongs to u1

b) The attacker may try to read/ write files bypassing acls.
In my program, since the repositary is changed to 700 mode, the attacker, unless
he gets the privileges of the owner or root to access the repositary, cannot
access files inside.
$ cat ly2331/u1-doc
Permission denied
$ cd ly2331
Permission denied

c) The attacker can close a file descriptor, say fd 1, then he can open some 
sensitive file to output by invoking setuid program. If he close fd 3, he can 
also write and change things in the sensitive file.
$ exec 1<&-

2. Test cases for the other approach (message passing)
a) Since we do not use getuid/ getgid in message passing, an attacker can trick
the server by fake-authentication.
b) Attacker can send illegal characters to daemon

